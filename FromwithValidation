-- html --
<button class="btn btn-dark mb-3" (click)="showUserForm = !showUserForm">Add User</button>
<div class="card card-body mb-3" *ngIf="showUserForm">
    <h2>Add User</h2>
    <form #userForm="ngForm" (ngSubmit)="onSubmit(userForm)">
        <div class="form-group">
            <label>First Name</label>
            <input 
            type="text" 
            [(ngModel)]="user.firstName"
            [ngClass]="{'is-invalid' : userFirstName.errors && userFirstName.touched }" 
            name="firstName" 
            class="form-control"
            #userFirstName="ngModel"
            required
            minlength="2">
            <div [hidden]="!userFirstName.errors?.required"  class="invalid-feedback">First name required</div>
            <div [hidden]="!userFirstName.errors?.minlength" class="invalid-feedback">Must be at least 2 characters</div>
        </div>
       
        <div class="form-group">
            <label>Last Name</label>
            <input type="text" 
            [(ngModel)]="user.lastName"
            #userLastName="ngModel"
            [ngClass]="{'is-invalid': userLastName.errors && userLastName.touched }" 
            name="lastName" 
            class="form-control"
            required
            minlength="2">
            <div [hidden]="!userLastName.errors?.required" class="invalid-feedback">
                Last name is required
            </div>
            <div [hidden]="!userLastName.errors?.minlength" class="invalid-feedback">
                Must be at least 2 characters
            </div>
        </div>
        <div class="form-group">
            <label>Email</label>
            <input type="email" 
            #userEmail="ngModel"
            [ngClass]="{'is-invalid': userEmail.errors && userEmail.touched }"
            [(ngModel)]="user.email" 
            name="email" 
            class="form-control"
            required
            pattern="^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$">
            <div [hidden]="!userEmail.errors?.required" class="invalid-feedback">Email is required</div>
            <div [hidden]="!userEmail.errors?.pattern" class="invalid-feedback">Invalid email</div>
        </div>
        <button [disabled]="!userForm.form.valid" class="btn btn-block mb-3">Add New User</button>
    </form>
</div>
<ul class="list-unstyled" *ngIf="loaded && users?.length > 0">
    <li class="card card-body mb-2" *ngFor="let user of users" [class.bg-light]="user.isActive">
        <h3>{{ user.firstName }} {{ user.lastName }} <small><button (click)="user.hide = !user.hide"
                    class="btn btn-dark btn-sm"><i
                        [ngClass]="user.hide?'fa fa-plus': 'fa fa-minus'"></i></button></small></h3>
        <ul class="list-group" *ngIf="!user.hide">
            <li class="list-group-item">Email: {{ user.email }}</li>
            <li class="list-group-item">Joined: {{user.registered | date}}</li>
        </ul>
    </li>
</ul>

<!-- <ng-template #noUsers>No users found</ng-template> -->
<h4 *ngIf="users?.length ===0">No users found</h4>
<h4 *ngIf="!loaded">Loading...</h4>

--js--
import { Component, OnInit, ViewChild } from '@angular/core';
import { User } from '../../models/User';
import { UserService } from '../../services/user.service';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.css']
})
export class UsersComponent implements OnInit {

  user: User = {
    firstName: "",
    lastName: "",
    email: ''
  };

  users: User[];
  showExtended: boolean = true;
  loaded: boolean = true;
  enableAdd: boolean = false;
  showUserForm: boolean = false;
  @ViewChild('userForm') form: any;
  data: any;

  constructor(private userService: UserService) { }

  ngOnInit() {

    // this.dataService.getData().subscribe(data =>
    //   console.log(data)
    // );

    this.userService.getusers()
    .subscribe(data => { 
      this.users = data;
      this.loaded = true;
    });
  };

  onSubmit({ value, valid }: { value: User, valid: boolean }) {
    if (!valid) {
      console.log('Form is not valid');
    } else {
      value.isActive = true;
      value.registered = new Date();
      value.hide = true;

      this.userService.addUser(value);
      this.form.reset();
    }
  }

}


--service --

import { Injectable } from '@angular/core';
import { User } from '../models/User';
import { Observable } from 'rxjs';
import { of } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  users: User[];
  data: Observable<any>;

  constructor() {
    this.users = [
      {
        firstName: "Patricia",
        lastName: "Rhomberg",
        email: 'pr@phub.net',
        isActive: true,
        registered: new Date('10/10/2002 08:30:00'),
        hide: true,
      },
      {
        firstName: "Nina",
        lastName: "Mercedez",
        email: 'nm@phub.net',
        isActive: false,
        registered: new Date('3/11/2017 06:20:00'),
        hide: true,
      },
      {
        firstName: "Asia",
        lastName: "Carrerra",
        email: 'ac@phub.net',
        isActive: true,
        registered: new Date('11/02/2016 10:30:00'),
        hide: true,
      },
    ];

  }

  getData(){

    this.data = new Observable( observer => {
      setTimeout(() => {
        observer.next(1);
      }, 1000);
      setTimeout(() => {
        observer.next(2);
      }, 2000);
      setTimeout(() => {
        observer.next(3);
      }, 3000);
      setTimeout(() => {
        observer.next(4);
      }, 4000);
    });

    return this.data;
  }

  getusers(): Observable<User[]> {
        return of(this.users);
  }

  addUser(user:User){
    this.users.unshift(user);
  }

}
